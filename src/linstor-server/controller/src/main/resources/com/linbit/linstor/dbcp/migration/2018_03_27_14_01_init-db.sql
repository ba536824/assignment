-- Security configuration
CREATE TABLE SEC_CONFIGURATION
(
    ENTRY_KEY VARCHAR(24) NOT NULL,
    ENTRY_DSP_KEY VARCHAR(24) NOT NULL,
    ENTRY_VALUE VARCHAR(24) NOT NULL,
    CONSTRAINT PK_SCFG PRIMARY KEY (ENTRY_KEY),
    CONSTRAINT CHK_SCFG_KEY CHECK (UPPER(ENTRY_KEY) = ENTRY_KEY AND LENGTH(ENTRY_KEY) >= 3),
    CONSTRAINT CHK_SCFG_DSP_KEY CHECK (UPPER(ENTRY_DSP_KEY) = ENTRY_KEY)
);

-- Identities / accounts
CREATE TABLE SEC_IDENTITIES
(
    IDENTITY_NAME VARCHAR(24) NOT NULL,
    IDENTITY_DSP_NAME VARCHAR(24) NOT NULL,
    PASS_SALT CHARACTER(32),
    PASS_HASH CHARACTER(128),
    ID_ENABLED BOOLEAN DEFAULT TRUE NOT NULL,
    ID_LOCKED BOOLEAN DEFAULT TRUE NOT NULL,
    CONSTRAINT PK_SI PRIMARY KEY (IDENTITY_NAME),
    CONSTRAINT CHK_SI_NAME CHECK (UPPER(IDENTITY_NAME) = IDENTITY_NAME AND LENGTH(IDENTITY_NAME) >= 3),
    CONSTRAINT CHK_SI_DSP_NAME CHECK (UPPER(IDENTITY_DSP_NAME) = IDENTITY_NAME)
);

-- Object types & domains
CREATE TABLE SEC_TYPES
(
    TYPE_NAME VARCHAR(24) NOT NULL,
    TYPE_DSP_NAME VARCHAR(24) NOT NULL,
    TYPE_ENABLED BOOLEAN DEFAULT TRUE NOT NULL,
    CONSTRAINT PK_ST PRIMARY KEY (TYPE_NAME),
    CONSTRAINT CHK_ST_NAME CHECK (UPPER(TYPE_NAME) = TYPE_NAME AND LENGTH(TYPE_NAME) >= 3),
    CONSTRAINT CHK_ST_DSPNAME CHECK (UPPER(TYPE_DSP_NAME) = TYPE_NAME)
);

-- Roles
CREATE TABLE SEC_ROLES
(
    ROLE_NAME VARCHAR(24) NOT NULL,
    ROLE_DSP_NAME VARCHAR(24) NOT NULL,
    DOMAIN_NAME VARCHAR(24) NOT NULL,
    ROLE_ENABLED BOOLEAN DEFAULT TRUE NOT NULL,
    ROLE_PRIVILEGES BIGINT DEFAULT 0 NOT NULL,
    CONSTRAINT PK_SR PRIMARY KEY (ROLE_NAME),
    CONSTRAINT FK_SR_SEC_TYPE FOREIGN KEY (DOMAIN_NAME) REFERENCES SEC_TYPES(TYPE_NAME),
    CONSTRAINT CHK_SR_ROLE_NAME CHECK (UPPER(ROLE_NAME) = ROLE_NAME AND LENGTH(ROLE_NAME) >= 3),
    CONSTRAINT CHK_SR_ROLE_DSP_NAME CHECK (UPPER(ROLE_DSP_NAME) = ROLE_NAME)
);

-- Identities - roles assignments
CREATE TABLE SEC_ID_ROLE_MAP
(
    IDENTITY_NAME VARCHAR(24) NOT NULL,
    ROLE_NAME VARCHAR(24) NOT NULL,
    CONSTRAINT PK_SIRM PRIMARY KEY (IDENTITY_NAME, ROLE_NAME),
    CONSTRAINT FK_SIRM_SEC_ID FOREIGN KEY (IDENTITY_NAME) REFERENCES SEC_IDENTITIES(IDENTITY_NAME)
        ON DELETE CASCADE,
    CONSTRAINT FK_SIRM_SEC_ROLE FOREIGN KEY (ROLE_NAME) REFERENCES SEC_ROLES(ROLE_NAME) ON DELETE CASCADE
);

-- Valid access types
CREATE TABLE SEC_ACCESS_TYPES
(
    ACCESS_TYPE_NAME VARCHAR(24) NOT NULL,
    ACCESS_TYPE_VALUE SMALLINT NOT NULL,
    CONSTRAINT PK_SAT PRIMARY KEY (ACCESS_TYPE_NAME),
    CONSTRAINT UNQ_SAT_TYPE_VALUE UNIQUE (ACCESS_TYPE_VALUE),
    CONSTRAINT CHK_SAT_TYPE_NAME CHECK (UPPER(ACCESS_TYPE_NAME) = ACCESS_TYPE_NAME)
);

-- Type enforcement rules
CREATE TABLE SEC_TYPE_RULES
(
    DOMAIN_NAME VARCHAR(24) NOT NULL,
    TYPE_NAME VARCHAR(24) NOT NULL,
    ACCESS_TYPE SMALLINT NOT NULL,
    CONSTRAINT PK_STR PRIMARY KEY (DOMAIN_NAME, TYPE_NAME),
    CONSTRAINT FK_STR_SEC_TYPE_DOMAIN FOREIGN KEY (DOMAIN_NAME) REFERENCES SEC_TYPES(TYPE_NAME) ON DELETE CASCADE,
    CONSTRAINT FK_STR_SEC_TYPE_TYPE   FOREIGN KEY (TYPE_NAME) REFERENCES SEC_TYPES(TYPE_NAME) ON DELETE CASCADE,
    CONSTRAINT FK_STR_ACCESS_TYPE     FOREIGN KEY (ACCESS_TYPE) REFERENCES SEC_ACCESS_TYPES(ACCESS_TYPE_VALUE)
);

-- Identities - default role assignments
CREATE TABLE SEC_DFLT_ROLES
(
    IDENTITY_NAME VARCHAR(24) NOT NULL,
    ROLE_NAME VARCHAR(24) NOT NULL,
    CONSTRAINT PK_SDR PRIMARY KEY (IDENTITY_NAME),
    CONSTRAINT FK_SDR_SEC_ID_ROLE_MAP FOREIGN KEY (IDENTITY_NAME, ROLE_NAME) REFERENCES
        SEC_ID_ROLE_MAP(IDENTITY_NAME, ROLE_NAME) ON DELETE CASCADE
);

-- Object proection
CREATE TABLE SEC_OBJECT_PROTECTION
(
    OBJECT_PATH VARCHAR(512) NOT NULL,
    CREATOR_IDENTITY_NAME VARCHAR(24) NOT NULL,
    OWNER_ROLE_NAME VARCHAR(24) NOT NULL,
    SECURITY_TYPE_NAME VARCHAR(24) NOT NULL,
    CONSTRAINT PK_SOP PRIMARY KEY (OBJECT_PATH),
    CONSTRAINT FK_SOP_SEC_ID FOREIGN KEY (CREATOR_IDENTITY_NAME) REFERENCES SEC_IDENTITIES(IDENTITY_NAME),
    CONSTRAINT FK_SOP_SEC_ROLES FOREIGN KEY (OWNER_ROLE_NAME) REFERENCES SEC_ROLES(ROLE_NAME),
    CONSTRAINT FK_SOP_SEC_TYPES FOREIGN KEY (SECURITY_TYPE_NAME) REFERENCES SEC_TYPES(TYPE_NAME)
);

-- Access control lists
CREATE TABLE SEC_ACL_MAP
(
    OBJECT_PATH VARCHAR(512) NOT NULL,
    ROLE_NAME VARCHAR(24) NOT NULL,
    ACCESS_TYPE SMALLINT NOT NULL,
    CONSTRAINT PK_SAM PRIMARY KEY (OBJECT_PATH, ROLE_NAME),
    CONSTRAINT FK_SAM_SEC_OBJ_PROT FOREIGN KEY (OBJECT_PATH) REFERENCES SEC_OBJECT_PROTECTION(OBJECT_PATH)
        ON DELETE CASCADE,
    CONSTRAINT FK_SAM_SEC_ROLES FOREIGN KEY (ROLE_NAME) REFERENCES SEC_ROLES(ROLE_NAME),
    CONSTRAINT FK_SAM_SEC_ACC_TYPE FOREIGN KEY (ACCESS_TYPE) REFERENCES SEC_ACCESS_TYPES(ACCESS_TYPE_VALUE)
);

-- linstor objects

CREATE TABLE NODES
(
    UUID CHARACTER(36) NOT NULL,
    NODE_NAME VARCHAR(255) NOT NULL,
    NODE_DSP_NAME VARCHAR(255) NOT NULL,
    NODE_FLAGS BIGINT NOT NULL,
    NODE_TYPE INTEGER NOT NULL,
    CONSTRAINT PK_N PRIMARY KEY (NODE_NAME),
    CONSTRAINT UNQ_N_UUID UNIQUE (UUID),
    CONSTRAINT CHK_N_NODES_NAME CHECK (UPPER(NODE_NAME) = NODE_NAME AND LENGTH(NODE_NAME) >= 2),
    CONSTRAINT CHK_N_NODES_DSPNAME CHECK (UPPER(NODE_DSP_NAME) = NODE_NAME)
);

CREATE TABLE NODE_NET_INTERFACES
(
    UUID CHARACTER(36) NOT NULL,
    NODE_NAME VARCHAR(255) NOT NULL,
    NODE_NET_NAME VARCHAR(255) NOT NULL,
    NODE_NET_DSP_NAME VARCHAR(255) NOT NULL,
    INET_ADDRESS VARCHAR(45) NOT NULL,
    CONSTRAINT PK_NNI PRIMARY KEY (NODE_NAME, NODE_NET_NAME),
    CONSTRAINT FK_NNI_NODES FOREIGN KEY (NODE_NAME) REFERENCES NODES(NODE_NAME) ON DELETE CASCADE,
    CONSTRAINT UNQ_NNI_UUID UNIQUE (UUID)
);

CREATE TABLE SATELLITE_CONNECTIONS
(
    UUID CHARACTER(36) NOT NULL,
    NODE_NAME VARCHAR(255) NOT NULL,
    NODE_NET_NAME VARCHAR(255) NOT NULL,
    TCP_PORT SMALLINT NOT NULL,
    INET_TYPE VARCHAR(5) NOT NULL,
    CONSTRAINT PK_SCONN PRIMARY KEY (NODE_NAME),
    CONSTRAINT FK_SCONN_NODE_NET_IFS FOREIGN KEY (NODE_NAME, NODE_NET_NAME) REFERENCES
        NODE_NET_INTERFACES(NODE_NAME, NODE_NET_NAME) ON DELETE CASCADE,
    CONSTRAINT UNQ_SCONN_UUID UNIQUE (UUID),
    CONSTRAINT CHK_SCONN_PORT_RANGE CHECK (TCP_PORT > 0 AND TCP_PORT < 65536),
    CONSTRAINT CHK_SCONN_TYPE CHECK (INET_TYPE = 'PLAIN' OR INET_TYPE = 'SSL')
);

CREATE TABLE RESOURCE_DEFINITIONS
(
    UUID CHARACTER(36) NOT NULL,
    RESOURCE_NAME VARCHAR(48) NOT NULL,
    RESOURCE_DSP_NAME VARCHAR(48) NOT NULL,
    TCP_PORT INTEGER NOT NULL,
    RESOURCE_FLAGS BIGINT NOT NULL,
    SECRET VARCHAR(20) NOT NULL,
    TRANSPORT_TYPE VARCHAR(40) NOT NULL,
    CONSTRAINT PK_RD PRIMARY KEY (RESOURCE_NAME),
    CONSTRAINT UNQ_RD_UUID UNIQUE (UUID),
    CONSTRAINT UNQ_TCP_PORT UNIQUE (TCP_PORT),
    CONSTRAINT CHK_RD_NAME CHECK (UPPER(RESOURCE_NAME) = RESOURCE_NAME AND LENGTH(RESOURCE_NAME) >= 2),
    CONSTRAINT CHK_RD_DSP_NAME CHECK (UPPER(RESOURCE_DSP_NAME) = RESOURCE_NAME),
    CONSTRAINT CHK_RD_PORT_RANGE CHECK (TCP_PORT > 0 AND TCP_PORT < 65536),
    CONSTRAINT CHK_RD_TRANSPORT_TYPE CHECK
        (TRANSPORT_TYPE = 'IP' OR TRANSPORT_TYPE = 'RDMA' OR TRANSPORT_TYPE = 'RoCE')
);

CREATE TABLE RESOURCES
(
    UUID CHARACTER(36) NOT NULL,
    NODE_NAME VARCHAR(255) NOT NULL,
    RESOURCE_NAME VARCHAR(48) NOT NULL,
    NODE_ID INTEGER NOT NULL,
    RESOURCE_FLAGS BIGINT NOT NULL,
    CONSTRAINT PK_R PRIMARY KEY (NODE_NAME, RESOURCE_NAME),
    CONSTRAINT FK_R_NODES FOREIGN KEY (NODE_NAME) REFERENCES NODES(NODE_NAME) ON DELETE CASCADE,
    CONSTRAINT FK_R_RSC_DFNS FOREIGN KEY (RESOURCE_NAME) REFERENCES RESOURCE_DEFINITIONS(RESOURCE_NAME)
        ON DELETE CASCADE,
    CONSTRAINT UNQ_R_UUID UNIQUE (UUID)
);

CREATE TABLE STOR_POOL_DEFINITIONS
(
    UUID CHARACTER(36) NOT NULL,
    POOL_NAME VARCHAR(48) NOT NULL,
    POOL_DSP_NAME VARCHAR(48) NOT NULL,
    CONSTRAINT PK_SPD PRIMARY KEY (POOL_NAME),
    CONSTRAINT UNQ_SPD_UUID UNIQUE (UUID),
    CONSTRAINT CHK_SPD_NAME CHECK (UPPER(POOL_NAME) = POOL_NAME AND LENGTH(POOL_NAME) >= 3),
    CONSTRAINT CHK_SPD_DSP_NAME CHECK (UPPER(POOL_DSP_NAME) = POOL_NAME)
);

CREATE TABLE NODE_STOR_POOL
(
    UUID CHARACTER(36) NOT NULL,
    NODE_NAME VARCHAR(255) NOT NULL,
    POOL_NAME VARCHAR(48) NOT NULL,
    DRIVER_NAME VARCHAR(256) NOT NULL,
    CONSTRAINT PK_SP PRIMARY KEY (NODE_NAME, POOL_NAME),
    CONSTRAINT FK_SP_NODES FOREIGN KEY (NODE_NAME) REFERENCES NODES(NODE_NAME) ON DELETE CASCADE,
    CONSTRAINT FK_SP_STOR_POOL_DFNS FOREIGN KEY (POOL_NAME) REFERENCES STOR_POOL_DEFINITIONS(POOL_NAME)
        ON DELETE CASCADE,
    CONSTRAINT UNQ_SP_UUID UNIQUE (UUID)
);

CREATE TABLE VOLUME_DEFINITIONS
(
    UUID CHARACTER(36) NOT NULL,
    RESOURCE_NAME VARCHAR(48) NOT NULL,
    VLM_NR INTEGER NOT NULL,
    VLM_SIZE BIGINT NOT NULL,
    VLM_MINOR_NR INTEGER NOT NULL,
    VLM_FLAGS BIGINT NOT NULL,
    CONSTRAINT PK_VD PRIMARY KEY (RESOURCE_NAME, VLM_NR),
    CONSTRAINT FK_VD_RSC_DFN FOREIGN KEY (RESOURCE_NAME) REFERENCES RESOURCE_DEFINITIONS(RESOURCE_NAME)
        ON DELETE CASCADE,
    CONSTRAINT UNQ_VD_UUID UNIQUE (UUID),
    CONSTRAINT UNQ_VD_MINOR UNIQUE (VLM_MINOR_NR)
);

CREATE TABLE VOLUMES
(
    UUID CHARACTER(36) NOT NULL,
    NODE_NAME VARCHAR(255) NOT NULL,
    RESOURCE_NAME VARCHAR(48) NOT NULL,
    VLM_NR INTEGER NOT NULL,
    STOR_POOL_NAME VARCHAR(48) NOT NULL,
    VLM_FLAGS BIGINT NOT NULL,
    CONSTRAINT PK_V PRIMARY KEY (NODE_NAME, RESOURCE_NAME, VLM_NR),
    CONSTRAINT FK_V_RSCS FOREIGN KEY (NODE_NAME, RESOURCE_NAME) REFERENCES RESOURCES(NODE_NAME, RESOURCE_NAME)
        ON DELETE CASCADE,
    CONSTRAINT FK_V_VLM_DFNS FOREIGN KEY (RESOURCE_NAME, VLM_NR) REFERENCES VOLUME_DEFINITIONS(RESOURCE_NAME, VLM_NR)
        ON DELETE CASCADE,
    CONSTRAINT FK_V_STOR_POOL_DFNS FOREIGN KEY (STOR_POOL_NAME) REFERENCES STOR_POOL_DEFINITIONS(POOL_NAME)
        ON DELETE CASCADE,
    CONSTRAINT UNQ_V_UUID UNIQUE (UUID)
);


CREATE TABLE NODE_CONNECTIONS
(
    UUID CHARACTER(36) NOT NULL,
    NODE_NAME_SRC VARCHAR(255) NOT NULL,
    NODE_NAME_DST VARCHAR(255) NOT NULL,
    CONSTRAINT PK_NC PRIMARY KEY (NODE_NAME_SRC, NODE_NAME_DST),
    CONSTRAINT FK_NC_NODES_SRC FOREIGN KEY (NODE_NAME_SRC) REFERENCES NODES(NODE_NAME) ON DELETE CASCADE,
    CONSTRAINT FK_NC_NODES_DST FOREIGN KEY (NODE_NAME_DST) REFERENCES NODES(NODE_NAME) ON DELETE CASCADE,
    CONSTRAINT UNQ_NC_UUID UNIQUE (UUID)
);

CREATE TABLE RESOURCE_CONNECTIONS
(
    UUID CHARACTER(36) NOT NULL,
    NODE_NAME_SRC VARCHAR(255) NOT NULL,
    NODE_NAME_DST VARCHAR(255) NOT NULL,
    RESOURCE_NAME VARCHAR(48) NOT NULL,
    CONSTRAINT PK_RC PRIMARY KEY (NODE_NAME_SRC, NODE_NAME_DST, RESOURCE_NAME),
    CONSTRAINT FK_RC_RSCS_SRC  FOREIGN KEY (NODE_NAME_SRC, RESOURCE_NAME) REFERENCES
        RESOURCES(NODE_NAME, RESOURCE_NAME) ON DELETE CASCADE,
    CONSTRAINT FK_RC_RSCS_DST FOREIGN KEY (NODE_NAME_DST, RESOURCE_NAME) REFERENCES
        RESOURCES(NODE_NAME, RESOURCE_NAME) ON DELETE CASCADE,
    CONSTRAINT UNQ_RC_UUID UNIQUE (UUID)
);

CREATE TABLE VOLUME_CONNECTIONS
(
    UUID CHARACTER(36) NOT NULL,
    NODE_NAME_SRC VARCHAR(255) NOT NULL,
    NODE_NAME_DST VARCHAR(255) NOT NULL,
    RESOURCE_NAME VARCHAR(48) NOT NULL,
    VLM_NR INTEGER NOT NULL,
    CONSTRAINT PK_VC PRIMARY KEY (NODE_NAME_SRC, NODE_NAME_DST, RESOURCE_NAME, VLM_NR),
    CONSTRAINT FK_VC_VLMS_SRC FOREIGN KEY (NODE_NAME_SRC, RESOURCE_NAME, VLM_NR) REFERENCES
        VOLUMES(NODE_NAME, RESOURCE_NAME, VLM_NR) ON DELETE CASCADE,
    CONSTRAINT FK_VC_VLMS_DST FOREIGN KEY (NODE_NAME_DST, RESOURCE_NAME, VLM_NR) REFERENCES
        VOLUMES(NODE_NAME, RESOURCE_NAME, VLM_NR) ON DELETE CASCADE,
    CONSTRAINT UNQ_VC_UUID UNIQUE (UUID)
);

CREATE TABLE PROPS_CONTAINERS
(
    PROPS_INSTANCE VARCHAR(510) NOT NULL,
    PROP_KEY VARCHAR(510) NOT NULL,
    PROP_VALUE VARCHAR(4096) NOT NULL,
    CONSTRAINT PK_PC PRIMARY KEY (PROPS_INSTANCE, PROP_KEY),
    CONSTRAINT CHK_PC_PRP_INST_NAME CHECK(UPPER(PROPS_INSTANCE) = PROPS_INSTANCE AND LENGTH(PROPS_INSTANCE) >= 2)
);

CREATE INDEX IDX_PROPS_CONTAINERS ON PROPS_CONTAINERS (PROPS_INSTANCE ASC);

-- Identities load
CREATE VIEW SEC_IDENTITIES_LOAD AS
    SELECT IDENTITY_DSP_NAME, ID_ENABLED
    FROM SEC_IDENTITIES;

-- Roles load
CREATE VIEW SEC_ROLES_LOAD AS
    SELECT ROLE_DSP_NAME, ROLE_ENABLED
    FROM SEC_ROLES;

-- Security types load
CREATE VIEW SEC_TYPES_LOAD AS
    SELECT TYPE_DSP_NAME, TYPE_ENABLED
    FROM SEC_TYPES;

-- Type enforcement rules load
CREATE VIEW SEC_TYPE_RULES_LOAD AS
    SELECT DOMAIN_NAME, TYPE_NAME, SEC_ACCESS_TYPES.ACCESS_TYPE_NAME AS ACCESS_TYPE
    FROM SEC_TYPE_RULES
    LEFT JOIN SEC_ACCESS_TYPES ON SEC_TYPE_RULES.ACCESS_TYPE = SEC_ACCESS_TYPES.ACCESS_TYPE_VALUE;

-- Security subsystem initialization
INSERT INTO SEC_CONFIGURATION (ENTRY_KEY, ENTRY_DSP_KEY, ENTRY_VALUE)
    VALUES ('SECURITYLEVEL', 'SecurityLevel', 'NO_SECURITY');

INSERT INTO SEC_CONFIGURATION (ENTRY_KEY, ENTRY_DSP_KEY, ENTRY_VALUE)
    VALUES ('AUTHREQUIRED', 'AuthRequired', 'false');

INSERT INTO SEC_ACCESS_TYPES (ACCESS_TYPE_NAME, ACCESS_TYPE_VALUE)
    VALUES ('CONTROL', 15);
INSERT INTO SEC_ACCESS_TYPES (ACCESS_TYPE_NAME, ACCESS_TYPE_VALUE)
    VALUES ('CHANGE', 7);
INSERT INTO SEC_ACCESS_TYPES (ACCESS_TYPE_NAME, ACCESS_TYPE_VALUE)
    VALUES ('USE', 3);
INSERT INTO SEC_ACCESS_TYPES (ACCESS_TYPE_NAME, ACCESS_TYPE_VALUE)
    VALUES ('VIEW', 1);

INSERT INTO SEC_IDENTITIES (IDENTITY_NAME, IDENTITY_DSP_NAME, ID_ENABLED, ID_LOCKED)
    VALUES ('SYSTEM', 'SYSTEM', TRUE, TRUE);
INSERT INTO SEC_IDENTITIES (IDENTITY_NAME, IDENTITY_DSP_NAME, ID_ENABLED, ID_LOCKED)
    VALUES ('PUBLIC', 'PUBLIC', TRUE, TRUE);

-- Domains / Types
INSERT INTO SEC_TYPES (TYPE_NAME, TYPE_DSP_NAME, TYPE_ENABLED)
    VALUES ('SYSTEM', 'SYSTEM', TRUE);
INSERT INTO SEC_TYPES (TYPE_NAME, TYPE_DSP_NAME, TYPE_ENABLED)
    VALUES ('PUBLIC', 'PUBLIC', TRUE);
INSERT INTO SEC_TYPES (TYPE_NAME, TYPE_DSP_NAME, TYPE_ENABLED)
    VALUES ('SHARED', 'SHARED', TRUE);
INSERT INTO SEC_TYPES (TYPE_NAME, TYPE_DSP_NAME, TYPE_ENABLED)
    VALUES ('SYSADM', 'SysAdm', TRUE);
INSERT INTO SEC_TYPES (TYPE_NAME, TYPE_DSP_NAME, TYPE_ENABLED)
    VALUES ('USER', 'User', TRUE);

-- Type enforcement rules
INSERT INTO SEC_TYPE_RULES (DOMAIN_NAME, TYPE_NAME, ACCESS_TYPE)
    VALUES ('SYSTEM', 'SYSTEM', 15);
INSERT INTO SEC_TYPE_RULES (DOMAIN_NAME, TYPE_NAME, ACCESS_TYPE)
    VALUES ('SYSTEM', 'PUBLIC', 15);
INSERT INTO SEC_TYPE_RULES (DOMAIN_NAME, TYPE_NAME, ACCESS_TYPE)
    VALUES ('SYSTEM', 'SHARED', 15);
INSERT INTO SEC_TYPE_RULES (DOMAIN_NAME, TYPE_NAME, ACCESS_TYPE)
    VALUES ('SYSTEM', 'SYSADM', 15);
INSERT INTO SEC_TYPE_RULES (DOMAIN_NAME, TYPE_NAME, ACCESS_TYPE)
    VALUES ('SYSTEM', 'USER', 15);

INSERT INTO SEC_TYPE_RULES (DOMAIN_NAME, TYPE_NAME, ACCESS_TYPE)
    VALUES ('PUBLIC', 'SYSTEM', 3);
INSERT INTO SEC_TYPE_RULES (DOMAIN_NAME, TYPE_NAME, ACCESS_TYPE)
    VALUES ('PUBLIC', 'PUBLIC', 15);
INSERT INTO SEC_TYPE_RULES (DOMAIN_NAME, TYPE_NAME, ACCESS_TYPE)
    VALUES ('PUBLIC', 'SHARED', 7);
INSERT INTO SEC_TYPE_RULES (DOMAIN_NAME, TYPE_NAME, ACCESS_TYPE)
    VALUES ('PUBLIC', 'SYSADM', 3);
INSERT INTO SEC_TYPE_RULES (DOMAIN_NAME, TYPE_NAME, ACCESS_TYPE)
    VALUES ('PUBLIC', 'USER', 3);

INSERT INTO SEC_TYPE_RULES (DOMAIN_NAME, TYPE_NAME, ACCESS_TYPE)
    VALUES ('SYSADM', 'SYSTEM', 15);
INSERT INTO SEC_TYPE_RULES (DOMAIN_NAME, TYPE_NAME, ACCESS_TYPE)
    VALUES ('SYSADM', 'PUBLIC', 15);
INSERT INTO SEC_TYPE_RULES (DOMAIN_NAME, TYPE_NAME, ACCESS_TYPE)
    VALUES ('SYSADM', 'SHARED', 15);
INSERT INTO SEC_TYPE_RULES (DOMAIN_NAME, TYPE_NAME, ACCESS_TYPE)
    VALUES ('SYSADM', 'SYSADM', 15);
INSERT INTO SEC_TYPE_RULES (DOMAIN_NAME, TYPE_NAME, ACCESS_TYPE)
    VALUES ('SYSADM', 'USER', 15);

INSERT INTO SEC_TYPE_RULES (DOMAIN_NAME, TYPE_NAME, ACCESS_TYPE)
    VALUES ('USER', 'SYSTEM', 3);
INSERT INTO SEC_TYPE_RULES (DOMAIN_NAME, TYPE_NAME, ACCESS_TYPE)
    VALUES ('USER', 'PUBLIC', 7);
INSERT INTO SEC_TYPE_RULES (DOMAIN_NAME, TYPE_NAME, ACCESS_TYPE)
    VALUES ('USER', 'SHARED', 7);
INSERT INTO SEC_TYPE_RULES (DOMAIN_NAME, TYPE_NAME, ACCESS_TYPE)
    VALUES ('USER', 'SYSADM', 3);
INSERT INTO SEC_TYPE_RULES (DOMAIN_NAME, TYPE_NAME, ACCESS_TYPE)
    VALUES ('USER', 'USER', 15);

-- Default security roles
INSERT INTO SEC_ROLES (ROLE_NAME, ROLE_DSP_NAME, DOMAIN_NAME, ROLE_ENABLED, ROLE_PRIVILEGES)
    VALUES ('SYSTEM', 'SYSTEM', 'SYSTEM', TRUE, -1);
INSERT INTO SEC_ROLES (ROLE_NAME, ROLE_DSP_NAME, DOMAIN_NAME, ROLE_ENABLED, ROLE_PRIVILEGES)
    VALUES ('PUBLIC', 'PUBLIC', 'PUBLIC', TRUE, 0);
INSERT INTO SEC_ROLES (ROLE_NAME, ROLE_DSP_NAME, DOMAIN_NAME, ROLE_ENABLED, ROLE_PRIVILEGES)
    VALUES ('SYSADM', 'SysAdm', 'SYSADM', TRUE, -1);
INSERT INTO SEC_ROLES (ROLE_NAME, ROLE_DSP_NAME, DOMAIN_NAME, ROLE_ENABLED, ROLE_PRIVILEGES)
    VALUES ('USER', 'User', 'USER', TRUE, 0);

-- Identity / Role assignment
INSERT INTO SEC_ID_ROLE_MAP (IDENTITY_NAME, ROLE_NAME)
    VALUES ('SYSTEM', 'SYSTEM');
INSERT INTO SEC_ID_ROLE_MAP (IDENTITY_NAME, ROLE_NAME)
    VALUES ('PUBLIC', 'PUBLIC');

-- Default role assignment
INSERT INTO SEC_DFLT_ROLES (IDENTITY_NAME, ROLE_NAME)
    VALUES ('SYSTEM', 'SYSTEM');
INSERT INTO SEC_DFLT_ROLES (IDENTITY_NAME, ROLE_NAME)
    VALUES ('PUBLIC', 'PUBLIC');


-- Default NetCom services
INSERT INTO PROPS_CONTAINERS VALUES ('CTRLCFG', 'defaultDebugSslConnector', 'DebugSslConnector');
 -- '' == take first SSL connector, except $defaultDebugSslConnector
INSERT INTO PROPS_CONTAINERS VALUES ('CTRLCFG', 'defaultSslConSvc', '');
 -- '' == take first plain connector
INSERT INTO PROPS_CONTAINERS VALUES ('CTRLCFG', 'defaultPlainConSvc', '');

-- Default PlainConnector
INSERT INTO PROPS_CONTAINERS VALUES ('CTRLCFG', 'netcom/PlainConnector/enabled', 'true');
INSERT INTO PROPS_CONTAINERS VALUES ('CTRLCFG', 'netcom/PlainConnector/type', 'plain');
INSERT INTO PROPS_CONTAINERS VALUES ('CTRLCFG', 'netcom/PlainConnector/bindaddress', '::0');
INSERT INTO PROPS_CONTAINERS VALUES ('CTRLCFG', 'netcom/PlainConnector/port', '3376');

-- Default SSLConnector
INSERT INTO PROPS_CONTAINERS VALUES ('CTRLCFG', 'netcom/SslConnector/enabled', 'true');
INSERT INTO PROPS_CONTAINERS VALUES ('CTRLCFG', 'netcom/SslConnector/type', 'ssl');
INSERT INTO PROPS_CONTAINERS VALUES ('CTRLCFG', 'netcom/SslConnector/bindaddress', '::0');
INSERT INTO PROPS_CONTAINERS VALUES ('CTRLCFG', 'netcom/SslConnector/port', '3377');
INSERT INTO PROPS_CONTAINERS VALUES ('CTRLCFG', 'netcom/SslConnector/keyPasswd', 'linstor');
INSERT INTO PROPS_CONTAINERS VALUES ('CTRLCFG', 'netcom/SslConnector/keyStorePasswd', 'linstor');
INSERT INTO PROPS_CONTAINERS VALUES ('CTRLCFG', 'netcom/SslConnector/trustStorePasswd', 'linstor');
INSERT INTO PROPS_CONTAINERS VALUES ('CTRLCFG', 'netcom/SslConnector/trustStore', 'ssl/certificates.jks');
INSERT INTO PROPS_CONTAINERS VALUES ('CTRLCFG', 'netcom/SslConnector/sslProtocol', 'TLSv1.2');
INSERT INTO PROPS_CONTAINERS VALUES ('CTRLCFG', 'netcom/SslConnector/keyStore', 'ssl/keystore.jks');

-- Default DebugSSLConnector
INSERT INTO PROPS_CONTAINERS VALUES ('CTRLCFG', 'netcom/DebugSslConnector/enabled', 'true');
INSERT INTO PROPS_CONTAINERS VALUES ('CTRLCFG', 'netcom/DebugSslConnector/type', 'ssl');
INSERT INTO PROPS_CONTAINERS VALUES ('CTRLCFG', 'netcom/DebugSslConnector/bindaddress', '::0');
INSERT INTO PROPS_CONTAINERS VALUES ('CTRLCFG', 'netcom/DebugSslConnector/port', '3373');
INSERT INTO PROPS_CONTAINERS VALUES ('CTRLCFG', 'netcom/DebugSslConnector/keyPasswd', 'linstor');
INSERT INTO PROPS_CONTAINERS VALUES ('CTRLCFG', 'netcom/DebugSslConnector/keyStorePasswd', 'linstor');
INSERT INTO PROPS_CONTAINERS VALUES ('CTRLCFG', 'netcom/DebugSslConnector/trustStorePasswd', 'linstor');
INSERT INTO PROPS_CONTAINERS VALUES ('CTRLCFG', 'netcom/DebugSslConnector/trustStore', 'ssl/certificates.jks');
INSERT INTO PROPS_CONTAINERS VALUES ('CTRLCFG', 'netcom/DebugSslConnector/sslProtocol', 'TLSv1.2');
INSERT INTO PROPS_CONTAINERS VALUES ('CTRLCFG', 'netcom/DebugSslConnector/keyStore', 'ssl/keystore.jks');

-- Access control - System objects

-- Owner - Nodes map
INSERT INTO SEC_OBJECT_PROTECTION (OBJECT_PATH, CREATOR_IDENTITY_NAME, OWNER_ROLE_NAME, SECURITY_TYPE_NAME)
    VALUES ('/sys/controller/nodesMap', 'SYSTEM', 'SYSADM', 'SHARED');
-- ACL: Nodes map
INSERT INTO SEC_ACL_MAP (OBJECT_PATH, ROLE_NAME, ACCESS_TYPE)
    VALUES ('/sys/controller/nodesMap', 'SYSTEM', 15);
INSERT INTO SEC_ACL_MAP (OBJECT_PATH, ROLE_NAME, ACCESS_TYPE)
    VALUES ('/sys/controller/nodesMap', 'USER', 7);

-- Owner - Resource definition map
INSERT INTO SEC_OBJECT_PROTECTION (OBJECT_PATH, CREATOR_IDENTITY_NAME, OWNER_ROLE_NAME, SECURITY_TYPE_NAME)
    VALUES ('/sys/controller/rscDfnMap', 'SYSTEM', 'SYSADM', 'SHARED');
-- ACL: Resource definition map
INSERT INTO SEC_ACL_MAP (OBJECT_PATH, ROLE_NAME, ACCESS_TYPE)
    VALUES ('/sys/controller/rscDfnMap', 'SYSTEM', 15);
INSERT INTO SEC_ACL_MAP (OBJECT_PATH, ROLE_NAME, ACCESS_TYPE)
    VALUES ('/sys/controller/rscDfnMap', 'USER', 7);

-- Owner - Storage pool map
INSERT INTO SEC_OBJECT_PROTECTION (OBJECT_PATH, CREATOR_IDENTITY_NAME, OWNER_ROLE_NAME, SECURITY_TYPE_NAME)
    VALUES ('/sys/controller/storPoolMap', 'SYSTEM', 'SYSADM', 'SHARED');
-- ACL: Storage pool map
INSERT INTO SEC_ACL_MAP (OBJECT_PATH, ROLE_NAME, ACCESS_TYPE)
    VALUES ('/sys/controller/storPoolMap', 'SYSTEM', 15);
INSERT INTO SEC_ACL_MAP (OBJECT_PATH, ROLE_NAME, ACCESS_TYPE)
    VALUES ('/sys/controller/storPoolMap', 'USER', 7);

-- Owner - System configuration properties
INSERT INTO SEC_OBJECT_PROTECTION (OBJECT_PATH, CREATOR_IDENTITY_NAME, OWNER_ROLE_NAME, SECURITY_TYPE_NAME)
    VALUES ('/sys/controller/conf', 'SYSTEM', 'SYSADM', 'SYSTEM');
-- ACL: System configuration properties
INSERT INTO SEC_ACL_MAP (OBJECT_PATH, ROLE_NAME, ACCESS_TYPE)
    VALUES ('/sys/controller/conf', 'SYSTEM', 15);

-- Owner - System shutdown request
INSERT INTO SEC_OBJECT_PROTECTION (OBJECT_PATH, CREATOR_IDENTITY_NAME, OWNER_ROLE_NAME, SECURITY_TYPE_NAME)
    VALUES ('/sys/controller/shutdown', 'SYSTEM', 'SYSADM', 'SYSTEM');
-- ACL: System shutdown request
INSERT INTO SEC_ACL_MAP (OBJECT_PATH, ROLE_NAME, ACCESS_TYPE)
    VALUES ('/sys/controller/shutdown', 'SYSTEM', 15);


-- Default storage pool definition
INSERT INTO STOR_POOL_DEFINITIONS VALUES ('f51611c6-528f-4793-a87a-866d09e6733a', 'DFLTSTORPOOL', 'DfltStorPool');
-- Owner - Default storage pool definition
INSERT INTO SEC_OBJECT_PROTECTION (OBJECT_PATH, CREATOR_IDENTITY_NAME, OWNER_ROLE_NAME, SECURITY_TYPE_NAME)
    VALUES ('/storpooldefinitions/DFLTSTORPOOL', 'SYSTEM', 'SYSADM', 'SHARED');
-- ACL - Default storage pool definition
INSERT INTO SEC_ACL_MAP (OBJECT_PATH, ROLE_NAME, ACCESS_TYPE)
    VALUES ('/storpooldefinitions/DFLTSTORPOOL', 'PUBLIC', 7);
INSERT INTO SEC_ACL_MAP (OBJECT_PATH, ROLE_NAME, ACCESS_TYPE)
    VALUES ('/storpooldefinitions/DFLTSTORPOOL', 'USER', 7);


-- Default diskless storage pool definition
INSERT INTO STOR_POOL_DEFINITIONS VALUES ('622807eb-c8c4-44f0-b03d-a08173c8fa1b', 'DFLTDISKLESSSTORPOOL', 'DfltDisklessStorPool');
-- Owner - Default storage pool definition
INSERT INTO SEC_OBJECT_PROTECTION (OBJECT_PATH, CREATOR_IDENTITY_NAME, OWNER_ROLE_NAME, SECURITY_TYPE_NAME)
    VALUES ('/storpooldefinitions/DFLTDISKLESSSTORPOOL', 'SYSTEM', 'SYSADM', 'SHARED');
-- ACL - Default storage pool definition
INSERT INTO SEC_ACL_MAP (OBJECT_PATH, ROLE_NAME, ACCESS_TYPE)
    VALUES ('/storpooldefinitions/DFLTDISKLESSSTORPOOL', 'PUBLIC', 7);
INSERT INTO SEC_ACL_MAP (OBJECT_PATH, ROLE_NAME, ACCESS_TYPE)
    VALUES ('/storpooldefinitions/DFLTDISKLESSSTORPOOL', 'USER', 7);


-- TEST ENTRIES FOR TESTING WITH ANONYMOUS CONNECTIONS (ID: PUBLIC / ROLE: PUBLIC / DOMAIN: PUBLIC)
-- Allow inserting and deleting nodes
INSERT INTO SEC_ACL_MAP (OBJECT_PATH, ROLE_NAME, ACCESS_TYPE)
    VALUES ('/sys/controller/nodesMap', 'PUBLIC', 7);

-- Allow inserting and deleting resource definitions
INSERT INTO SEC_ACL_MAP (OBJECT_PATH, ROLE_NAME, ACCESS_TYPE)
    VALUES ('/sys/controller/rscDfnMap', 'PUBLIC', 7);

-- Allow inserting and deleting storage pool definitions
INSERT INTO SEC_ACL_MAP (OBJECT_PATH, ROLE_NAME, ACCESS_TYPE)
    VALUES ('/sys/controller/storPoolMap', 'PUBLIC', 7);

-- Allow viewing the system configuration
INSERT INTO SEC_ACL_MAP (OBJECT_PATH, ROLE_NAME, ACCESS_TYPE)
    VALUES ('/sys/controller/conf', 'PUBLIC', 1);
